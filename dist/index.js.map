{
  "version": 3,
  "sources": ["../src/globals/supported-filters.global.ts", "../src/utils/context.utils.ts", "../src/patches/property.patches.ts", "../src/globals/protected-keys.global.ts", "../src/patches/setter.patches.ts", "../src/globals/drawing-functions.global.ts", "../src/utils/filter.utils.ts", "../src/patches/method.patches.ts", "../src/filters/none.filter.ts", "../src/filters/blur.filter.ts", "../src/filters/brightness.filter.ts", "../src/filters/contrast.filter.ts", "../src/filters/drop-shadow.filter.ts", "../src/filters/grayscale.filter.ts", "../src/filters/hue-rotate.filter.ts", "../src/filters/invert.filter.ts", "../src/filters/opacity.filter.ts", "../src/filters/saturate.filter.ts", "../src/filters/sepia.filter.ts", "../src/index.ts"],
  "sourcesContent": ["import type { Filter } from '../types/filter.type';\n\n// stores all implemented filters, see\n// available filters for reference\nexport const SUPPORTED_FILTERS = new Map<string, Filter>();\n", "// detects feature availability\nexport const supportsContextFilters = () => 'filter' in CanvasRenderingContext2D.prototype;\n\n// creates an offscreen context matching the origin\nexport const createOffscreenContext = (\n  original: CanvasRenderingContext2D,\n): CanvasRenderingContext2D => {\n  // prepare a non-patched canvas\n  const canvas = document.createElement('canvas') as HTMLCanvasElement;\n  canvas.height = original.canvas.height;\n  canvas.width = original.canvas.width;\n\n  // we won't patch the mirror as it will lead to a loop\n  Object.defineProperty(canvas, '__skipFilterPatch', { value: true });\n\n  // get context\n  return canvas.getContext('2d')!;\n};\n", "// add filter property\nimport { AvailableFilter } from '../enums/available-filter.enum';\n\n// apply property patches\nexport function applyPropertyPatches(canvas: any, context: any) {\n  Object.defineProperty(canvas.prototype, '__skipFilterPatch', { writable: true, value: false });\n  Object.defineProperty(canvas.prototype, '__currentPathMirror', {\n    writable: true,\n    value: undefined,\n  });\n  Object.defineProperty(context.prototype, 'filter', {\n    writable: true,\n    value: AvailableFilter.None,\n  });\n}\n", "export const PROTECTED_KEYS = [\n  '__skipFilterPatch',\n  '__currentPathMirror',\n  'canvas',\n  'clearRect',\n  'filter',\n  'getImageData',\n  'globalCompositeOperation',\n];\n", "import { PROTECTED_KEYS } from '../globals/protected-keys.global';\nimport { createOffscreenContext } from '../utils/context.utils';\n\nexport function applySetterPatches(context: any) {\n  // we monkey-patch all context members to\n  // apply everything to the current mirror\n  Object.keys(context.prototype)\n    // do not overload these\n    .filter(member => PROTECTED_KEYS.indexOf(member) < 0)\n    // get the whole descriptor\n    .map(member => ({\n      member,\n      descriptor: Object.getOwnPropertyDescriptor(context.prototype, member),\n    }))\n    // get setters only\n    .filter(({ descriptor }) => descriptor!.set)\n    // apply monkey-patch to pass through\n    .forEach(({ member, descriptor }) => {\n      // overload setter\n      const original = descriptor;\n      Object.defineProperty(context.prototype, member, {\n        get: function () {\n          if (this.canvas.__skipFilterPatch) {\n            return original!.get!.call(this);\n          }\n\n          // read from mirror\n          return this.canvas.__currentPathMirror[member];\n        },\n        set: function (value: any) {\n          // do not apply on mirror\n          if (this.canvas.__skipFilterPatch) {\n            return original!.set!.call(this, value);\n          }\n\n          // prepare mirror context if missing\n          if (!this.canvas.__currentPathMirror) {\n            this.canvas.__currentPathMirror = createOffscreenContext(this);\n          }\n\n          // apply to mirror\n          this.canvas.__currentPathMirror[member] = value;\n        },\n      });\n    });\n}\n", "// all functions that somehow force the canvas to\n// actually draw something which should adopt the\n// given filters\n// TODO: what about clipping?\nexport const DRAWING_FUNCTIONS = [\n  'clearRect',\n  // 'clip',\n  'drawImage',\n\n  'fill',\n  'fillRect',\n  'fillText',\n\n  'stroke',\n  'strokeRect',\n  'strokeText',\n];\n", "import { AvailableFilter } from '../enums/available-filter.enum';\nimport { SUPPORTED_FILTERS } from '../globals/supported-filters.global';\n\n// applies the given filter to the provided canvas 2d context\nexport const applyFilter = (\n  context: CanvasRenderingContext2D,\n  canvasFilters: CanvasFilters['filter'],\n) => {\n  // parse applied filters and call implementations\n  canvasFilters\n    // filters are separated by whitespace\n    .match(/([-a-z]+)(?:\\(([\\w\\d\\s\\.%-]*)\\))?/gim)\n    // filters may have options within appended brackets\n    ?.map(\n      filter => filter.match(/([-a-z]+)(?:\\((.*)\\))?/i)?.slice(1, 3) as [AvailableFilter, string],\n    )\n    // apply all filters\n    .reduce((input, [filter, options]) => {\n      // do we have a appropriate filter implementation?\n      if (SUPPORTED_FILTERS.has(filter)) {\n        // then filter and return the result\n        return SUPPORTED_FILTERS.get(filter)!(input, ...(options || '').split(' '));\n      }\n      // nope, skip this\n      return input;\n    }, context);\n};\n\n// filter options are often represented as number-percentage,\n// means that they'll be percentages like `50%` or floating\n// in-between 0 and 1 like `.5`, so we normalize them.\n// https://developer.mozilla.org/en-US/docs/Web/CSS/filter#number-percentage\nexport const normalizeNumberPercentage = (percentage: string): number => {\n  let normalized = parseFloat(percentage);\n\n  // check for percentages and divide by a hundred\n  if (/%\\s*?$/i.test(percentage)) {\n    normalized /= 100;\n  }\n\n  return normalized;\n};\n\n// normalizes angles to a float between 0 and 1.\n// https://developer.mozilla.org/en-US/docs/Web/CSS/angle#Units\nexport const normalizeAngle = (angle: string): number => {\n  let normalized = parseFloat(angle);\n  const unit = angle.slice(normalized.toString().length);\n\n  // check for units and align accordingly\n  switch (unit) {\n    case 'deg':\n      normalized /= 360;\n      break;\n    case 'grad':\n      normalized /= 400;\n      break;\n    case 'rad':\n      normalized /= 2 * Math.PI;\n      break;\n  }\n\n  return normalized;\n};\n\n// TODO: we're assuming pixel based values for now only, so adopt to other lengths as well\n// https://developer.mozilla.org/en-US/docs/Web/CSS/length\nexport const normalizeLength = (length: string): number => {\n  return parseFloat(length);\n};\n", "import { createOffscreenContext } from '../utils/context.utils';\nimport { DRAWING_FUNCTIONS } from '../globals/drawing-functions.global';\nimport { PROTECTED_KEYS } from '../globals/protected-keys.global';\nimport { applyFilter } from '../utils/filter.utils';\n\nexport function applyMethodPatches(context: any) {\n  // we monkey-patch all context members to\n  // apply everything to the current mirror\n  Object.keys(context.prototype)\n    // do not overload these\n    .filter(member => PROTECTED_KEYS.indexOf(member) < 0)\n    // get the whole descriptor\n    .map(member => ({\n      member,\n      descriptor: Object.getOwnPropertyDescriptor(context.prototype, member),\n    }))\n    // get methods only\n    .filter(({ descriptor }) => descriptor!.value && typeof descriptor!.value === 'function')\n    // apply monkey-patch to pass through\n    .forEach(({ member, descriptor }) => {\n      const original = descriptor!.value;\n      Object.defineProperty(context.prototype, member, {\n        value: function (...args: any[]) {\n          // do not apply on mirror, but apply clearRect to original\n          if (this.canvas.__skipFilterPatch) {\n            return original.call(this, ...args);\n          }\n\n          // prepare mirror context if missing\n          if (!this.canvas.__currentPathMirror) {\n            this.canvas.__currentPathMirror = createOffscreenContext(this);\n          }\n\n          // apply to mirror\n          const result = this.canvas.__currentPathMirror[member](...args);\n\n          // draw functions may get filters applied and copied back to original\n          if (DRAWING_FUNCTIONS.includes(member)) {\n            var strokeStyle = this.strokeStyle;\n            var fillStyle = this.fillStyle;\n            // apply the filter\n            applyFilter(this.canvas.__currentPathMirror, this.filter);\n\n            // disable patch and reset transform temporary if supported\n            this.canvas.__skipFilterPatch = true;\n            let originalTransform;\n            if ('getTransform' in this) {\n              originalTransform = this.getTransform();\n              this.setTransform(1, 0, 0, 1, 0, 0);\n            }\n\n            // draw mirror back\n            this.drawImage(this.canvas.__currentPathMirror.canvas, 0, 0, this.canvas.width, this.canvas.height);\n        \n\n            // set back transforms and re-enable patch\n            if (originalTransform) {\n              this.setTransform(originalTransform);\n            }\n            this.canvas.__skipFilterPatch = false;\n\n            // reset the mirror for next draw cycle\n            this.canvas.__currentPathMirror = createOffscreenContext(this);\n            this.strokeStyle = strokeStyle; this.fillStyle = fillStyle;\n          }\n\n          return result;\n        },\n      });\n    });\n}", "import type { Filter } from '../types/filter.type';\n\nexport const none: Filter = context => context;\n", "import type { Filter } from '../types/filter.type';\nimport { normalizeLength } from '../utils/filter.utils';\n\nexport const blur: Filter = (context, radius = '0') => {\n  const amount = normalizeLength(radius);\n\n  // do not manipulate without proper amount\n  if (amount <= 0) {\n    return context;\n  }\n\n  const { height, width } = context.canvas;\n  const imageData = context.getImageData(0, 0, width, height);\n  const { data } = imageData;\n\n  // http://www.quasimondo.com/BoxBlurForCanvas/FastBlur.js\n  const wm = width - 1;\n  const hm = height - 1;\n  const rad1 = amount + 1;\n\n  const mulTable = [\n    1, 57, 41, 21, 203, 34, 97, 73, 227, 91, 149, 62, 105, 45, 39, 137, 241, 107, 3, 173, 39, 71,\n    65, 238, 219, 101, 187, 87, 81, 151, 141, 133, 249, 117, 221, 209, 197, 187, 177, 169, 5, 153,\n    73, 139, 133, 127, 243, 233, 223, 107, 103, 99, 191, 23, 177, 171, 165, 159, 77, 149, 9, 139,\n    135, 131, 253, 245, 119, 231, 224, 109, 211, 103, 25, 195, 189, 23, 45, 175, 171, 83, 81, 79,\n    155, 151, 147, 9, 141, 137, 67, 131, 129, 251, 123, 30, 235, 115, 113, 221, 217, 53, 13, 51, 50,\n    49, 193, 189, 185, 91, 179, 175, 43, 169, 83, 163, 5, 79, 155, 19, 75, 147, 145, 143, 35, 69,\n    17, 67, 33, 65, 255, 251, 247, 243, 239, 59, 29, 229, 113, 111, 219, 27, 213, 105, 207, 51, 201,\n    199, 49, 193, 191, 47, 93, 183, 181, 179, 11, 87, 43, 85, 167, 165, 163, 161, 159, 157, 155, 77,\n    19, 75, 37, 73, 145, 143, 141, 35, 138, 137, 135, 67, 33, 131, 129, 255, 63, 250, 247, 61, 121,\n    239, 237, 117, 29, 229, 227, 225, 111, 55, 109, 216, 213, 211, 209, 207, 205, 203, 201, 199,\n    197, 195, 193, 48, 190, 47, 93, 185, 183, 181, 179, 178, 176, 175, 173, 171, 85, 21, 167, 165,\n    41, 163, 161, 5, 79, 157, 78, 154, 153, 19, 75, 149, 74, 147, 73, 144, 143, 71, 141, 140, 139,\n    137, 17, 135, 134, 133, 66, 131, 65, 129, 1,\n  ];\n  const mulSum = mulTable[amount];\n\n  const shgTable = [\n    0, 9, 10, 10, 14, 12, 14, 14, 16, 15, 16, 15, 16, 15, 15, 17, 18, 17, 12, 18, 16, 17, 17, 19,\n    19, 18, 19, 18, 18, 19, 19, 19, 20, 19, 20, 20, 20, 20, 20, 20, 15, 20, 19, 20, 20, 20, 21, 21,\n    21, 20, 20, 20, 21, 18, 21, 21, 21, 21, 20, 21, 17, 21, 21, 21, 22, 22, 21, 22, 22, 21, 22, 21,\n    19, 22, 22, 19, 20, 22, 22, 21, 21, 21, 22, 22, 22, 18, 22, 22, 21, 22, 22, 23, 22, 20, 23, 22,\n    22, 23, 23, 21, 19, 21, 21, 21, 23, 23, 23, 22, 23, 23, 21, 23, 22, 23, 18, 22, 23, 20, 22, 23,\n    23, 23, 21, 22, 20, 22, 21, 22, 24, 24, 24, 24, 24, 22, 21, 24, 23, 23, 24, 21, 24, 23, 24, 22,\n    24, 24, 22, 24, 24, 22, 23, 24, 24, 24, 20, 23, 22, 23, 24, 24, 24, 24, 24, 24, 24, 23, 21, 23,\n    22, 23, 24, 24, 24, 22, 24, 24, 24, 23, 22, 24, 24, 25, 23, 25, 25, 23, 24, 25, 25, 24, 22, 25,\n    25, 25, 24, 23, 24, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 23, 25, 23, 24, 25, 25, 25,\n    25, 25, 25, 25, 25, 25, 24, 22, 25, 25, 23, 25, 25, 20, 24, 25, 24, 25, 25, 22, 24, 25, 24, 25,\n    24, 25, 25, 24, 25, 25, 25, 25, 22, 25, 25, 25, 24, 25, 24, 25, 18,\n  ];\n  const shgSum = shgTable[amount];\n\n  const r = [];\n  const g = [];\n  const b = [];\n  const a = [];\n\n  const vmin = [];\n  const vmax = [];\n\n  let iterations = 3; // 1 - 3\n  let p, p1, p2, pa;\n\n  while (iterations-- > 0) {\n    let yw = 0;\n    let yi = 0;\n\n    for (let y = 0; y < height; y++) {\n      let rsum = data[yw] * rad1;\n      let gsum = data[yw + 1] * rad1;\n      let bsum = data[yw + 2] * rad1;\n      let asum = data[yw + 3] * rad1;\n\n      for (let i = 1; i <= amount; i++) {\n        // tslint:disable-next-line no-bitwise\n        p = yw + ((i > wm ? wm : i) << 2);\n        rsum += data[p++];\n        gsum += data[p++];\n        bsum += data[p++];\n        asum += data[p];\n      }\n\n      for (let x = 0; x < width; x++) {\n        r[yi] = rsum;\n        g[yi] = gsum;\n        b[yi] = bsum;\n        a[yi] = asum;\n\n        if (y === 0) {\n          // tslint:disable-next-line no-bitwise\n          vmin[x] = ((p = x + rad1) < wm ? p : wm) << 2;\n          // tslint:disable-next-line no-bitwise\n          vmax[x] = (p = x - amount) > 0 ? p << 2 : 0;\n        }\n\n        p1 = yw + vmin[x];\n        p2 = yw + vmax[x];\n\n        rsum += data[p1++] - data[p2++];\n        gsum += data[p1++] - data[p2++];\n        bsum += data[p1++] - data[p2++];\n        asum += data[p1] - data[p2];\n\n        yi++;\n      }\n      // tslint:disable-next-line no-bitwise\n      yw += width << 2;\n    }\n\n    for (let x = 0; x < width; x++) {\n      let yp = x;\n      let rsum = r[yp] * rad1;\n      let gsum = g[yp] * rad1;\n      let bsum = b[yp] * rad1;\n      let asum = a[yp] * rad1;\n\n      for (let i = 1; i <= amount; i++) {\n        yp += i > hm ? 0 : width;\n        rsum += r[yp];\n        gsum += g[yp];\n        bsum += b[yp];\n        asum += a[yp];\n      }\n\n      // tslint:disable-next-line no-bitwise\n      yi = x << 2;\n\n      for (let y = 0; y < height; y++) {\n        // tslint:disable-next-line no-bitwise\n        data[yi + 3] = pa = (asum * mulSum) >>> shgSum;\n\n        if (pa > 0) {\n          pa = 255 / pa;\n          // tslint:disable-next-line no-bitwise\n          data[yi] = ((rsum * mulSum) >>> shgSum) * pa;\n          // tslint:disable-next-line no-bitwise\n          data[yi + 1] = ((gsum * mulSum) >>> shgSum) * pa;\n          // tslint:disable-next-line no-bitwise\n          data[yi + 2] = ((bsum * mulSum) >>> shgSum) * pa;\n        } else {\n          data[yi] = data[yi + 1] = data[yi + 2] = 0;\n        }\n\n        if (x === 0) {\n          vmin[y] = ((p = y + rad1) < hm ? p : hm) * width;\n          vmax[y] = (p = y - amount) > 0 ? p * width : 0;\n        }\n\n        p1 = x + vmin[y];\n        p2 = x + vmax[y];\n\n        rsum += r[p1] - r[p2];\n        gsum += g[p1] - g[p2];\n        bsum += b[p1] - b[p2];\n        asum += a[p1] - a[p2];\n\n        // tslint:disable-next-line no-bitwise\n        yi += width << 2;\n      }\n    }\n  }\n\n  // set back image data to context\n  context.putImageData(imageData, 0, 0);\n\n  // return the context itself\n  return context;\n};\n", "import type { Filter } from '../types/filter.type';\nimport { normalizeNumberPercentage } from '../utils/filter.utils';\n\nexport const brightness: Filter = (context, amount = '1') => {\n  amount = normalizeNumberPercentage(amount);\n\n  // do not manipulate without proper amount\n  if (amount === 1) {\n    return context;\n  }\n\n  // align minimum\n  if (amount < 0) {\n    amount = 0;\n  }\n\n  const { height, width } = context.canvas;\n  const imageData = context.getImageData(0, 0, width, height);\n  const { data } = imageData;\n  const { length } = data;\n\n  // in rgba world, every\n  // n * 4 + 0 is red,\n  // n * 4 + 1 green and\n  // n * 4 + 2 is blue\n  // the fourth can be skipped as it's the alpha channel\n  for (let i = 0; i < length; i += 4) {\n    data[i + 0] *= amount;\n    data[i + 1] *= amount;\n    data[i + 2] *= amount;\n  }\n\n  // set back image data to context\n  context.putImageData(imageData, 0, 0);\n\n  // return the context itself\n  return context;\n};\n", "import type { Filter } from '../types/filter.type';\nimport { normalizeNumberPercentage } from '../utils/filter.utils';\n\nexport const contrast: Filter = (context, amount = '1') => {\n  amount = normalizeNumberPercentage(amount);\n\n  // do not manipulate without proper amount\n  if (amount === 1) {\n    return context;\n  }\n\n  // align minimum\n  if (amount < 0) {\n    amount = 0;\n  }\n\n  const { height, width } = context.canvas;\n  const imageData = context.getImageData(0, 0, width, height);\n  const { data } = imageData;\n  const { length } = data;\n\n  // in rgba world, every\n  // n * 4 + 0 is red,\n  // n * 4 + 1 green and\n  // n * 4 + 2 is blue\n  // the fourth can be skipped as it's the alpha channel\n  // https://gist.github.com/jonathantneal/2053866\n  for (let i = 0; i < length; i += 4) {\n    data[i + 0] = ((data[i + 0] / 255 - 0.5) * amount + 0.5) * 255;\n    data[i + 1] = ((data[i + 1] / 255 - 0.5) * amount + 0.5) * 255;\n    data[i + 2] = ((data[i + 2] / 255 - 0.5) * amount + 0.5) * 255;\n  }\n\n  // set back image data to context\n  context.putImageData(imageData, 0, 0);\n\n  // return the context itself\n  return context;\n};\n", "import type { Filter } from '../types/filter.type';\nimport { normalizeLength } from '../utils/filter.utils';\n\nexport const dropShadow: Filter = (\n  context,\n  offsetX: string,\n  offsetY: string,\n  blurOrColor?: string,\n  color?: string,\n) => {\n  // prepare a new temp canvas\n  const shadowContext = document.createElement('canvas').getContext('2d')!;\n  const { width, height } = context.canvas;\n\n  // set the same size of the original canvas\n  // https://github.com/davidenke/context-filter-polyfill/issues/9\n  shadowContext.canvas.width = width;\n  shadowContext.canvas.height = height;\n\n  // normalize the params and apply to the temp context\n  // be aware of different blur behavior in different browsers\n  // s. https://github.com/fabricjs/fabric.js/issues/4402\n  shadowContext.shadowOffsetX = normalizeLength(offsetX);\n  shadowContext.shadowOffsetY = normalizeLength(offsetY);\n  shadowContext.shadowBlur = color ? normalizeLength(blurOrColor || '0') : 0;\n  shadowContext.shadowColor = color || blurOrColor || 'transparent';\n\n  // draw over the contents applying the shadow\n  shadowContext.drawImage(context.canvas, 0, 0);\n\n  // set back shadowed contents\n  context.putImageData(shadowContext.getImageData(0, 0, width, height), 0, 0);\n\n  // return the context itself\n  return context;\n};\n", "import type { Filter } from '../types/filter.type';\nimport { normalizeNumberPercentage } from '../utils/filter.utils';\n\nexport const grayscale: Filter = (context, amount = '0') => {\n  amount = normalizeNumberPercentage(amount);\n\n  // do not manipulate without proper amount\n  if (amount <= 0) {\n    return context;\n  }\n\n  // a maximum of 100%\n  if (amount > 1) {\n    amount = 1;\n  }\n\n  const { height, width } = context.canvas;\n  const imageData = context.getImageData(0, 0, width, height);\n  const { data } = imageData;\n  const { length } = data;\n\n  // in rgba world, every\n  // n * 4 + 0 is red,\n  // n * 4 + 1 green and\n  // n * 4 + 2 is blue\n  // the fourth can be skipped as it's the alpha channel\n  for (let i = 0; i < length; i += 4) {\n    const luma = data[i] * 0.2126 + data[i + 1] * 0.7152 + data[i + 2] * 0.0722;\n    data[i + 0] += (luma - data[i + 0]) * amount;\n    data[i + 1] += (luma - data[i + 1]) * amount;\n    data[i + 2] += (luma - data[i + 2]) * amount;\n  }\n\n  // set back image data to context\n  context.putImageData(imageData, 0, 0);\n\n  // return the context itself\n  return context;\n};\n", "import type { Filter } from '../types/filter.type';\nimport { normalizeAngle } from '../utils/filter.utils';\n\nexport const hueRotate: Filter = (context, rotation = '0deg') => {\n  const amount = normalizeAngle(rotation);\n\n  // do not manipulate without proper amount\n  if (amount <= 0) {\n    return context;\n  }\n\n  const { height, width } = context.canvas;\n  const imageData = context.getImageData(0, 0, width, height);\n  const { data } = imageData;\n\n  // in rgba world, every\n  // n * 4 + 0 is red,\n  // n * 4 + 1 green and\n  // n * 4 + 2 is blue\n  // the fourth can be skipped as it's the alpha channel\n  // https://github.com/makoConstruct/canvas-hue-rotate/blob/master/hueShiftCanvas.js\n  const h = ((amount % 1) + 1) % 1; // wraps the angle to unit interval, even when negative\n  const th = h * 3;\n  const thr = Math.floor(th);\n  const d = th - thr;\n  const b = 1 - d;\n  let ma, mb, mc;\n  let md, me, mf;\n  let mg, mh, mi;\n\n  switch (thr) {\n    default:\n      ma = mb = mc = md = me = mf = mg = mh = mi = 0;\n      break;\n    case 0:\n      ma = b;\n      mb = 0;\n      mc = d;\n      md = d;\n      me = b;\n      mf = 0;\n      mg = 0;\n      mh = d;\n      mi = b;\n      break;\n    case 1:\n      ma = 0;\n      mb = d;\n      mc = b;\n      md = b;\n      me = 0;\n      mf = d;\n      mg = d;\n      mh = b;\n      mi = 0;\n      break;\n    case 2:\n      ma = d;\n      mb = b;\n      mc = 0;\n      md = 0;\n      me = d;\n      mf = b;\n      mg = b;\n      mh = 0;\n      mi = d;\n      break;\n  }\n  // do the pixels\n  let place = 0;\n  for (let y = 0; y < height; ++y) {\n    for (let x = 0; x < width; ++x) {\n      place = 4 * (y * width + x);\n\n      const ir = data[place + 0];\n      const ig = data[place + 1];\n      const ib = data[place + 2];\n\n      data[place + 0] = Math.floor(ma * ir + mb * ig + mc * ib);\n      data[place + 1] = Math.floor(md * ir + me * ig + mf * ib);\n      data[place + 2] = Math.floor(mg * ir + mh * ig + mi * ib);\n    }\n  }\n\n  // set back image data to context\n  context.putImageData(imageData, 0, 0);\n\n  // return the context itself\n  return context;\n};\n", "import type { Filter } from '../types/filter.type';\nimport { normalizeNumberPercentage } from '../utils/filter.utils';\n\nexport const invert: Filter = (context, amount = '0') => {\n  amount = normalizeNumberPercentage(amount);\n\n  // do not manipulate without proper amount\n  if (amount <= 0) {\n    return context;\n  }\n\n  // a maximum of 100%\n  if (amount > 1) {\n    amount = 1;\n  }\n\n  const { height, width } = context.canvas;\n  const imageData = context.getImageData(0, 0, width, height);\n  const { data } = imageData;\n  const { length } = data;\n\n  // in rgba world, every\n  // n * 4 + 0 is red,\n  // n * 4 + 1 green and\n  // n * 4 + 2 is blue\n  // the fourth can be skipped as it's the alpha channel\n  for (let i = 0; i < length; i += 4) {\n    data[i + 0] = Math.abs(data[i + 0] - 255 * amount);\n    data[i + 1] = Math.abs(data[i + 1] - 255 * amount);\n    data[i + 2] = Math.abs(data[i + 2] - 255 * amount);\n  }\n\n  // set back image data to context\n  context.putImageData(imageData, 0, 0);\n\n  // return the context itself\n  return context;\n};\n", "import type { Filter } from '../types/filter.type';\nimport { normalizeNumberPercentage } from '../utils/filter.utils';\n\nexport const opacity: Filter = (context, amount = '1') => {\n  amount = normalizeNumberPercentage(amount);\n\n  // do not manipulate without proper amount\n  if (amount < 0) {\n    return context;\n  }\n\n  // a maximum of 100%\n  if (amount > 1) {\n    amount = 1;\n  }\n\n  const { height, width } = context.canvas;\n  const imageData = context.getImageData(0, 0, width, height);\n  const { data } = imageData;\n  const { length } = data;\n\n  // in rgba world, the 4th entry is the alpha channel\n  for (let i = 3; i < length; i += 4) {\n    data[i] *= amount;\n  }\n\n  // set back image data to context\n  context.putImageData(imageData, 0, 0);\n\n  // return the context itself\n  return context;\n};\n", "import type { Filter } from '../types/filter.type';\nimport { normalizeNumberPercentage } from '../utils/filter.utils';\n\nexport const saturate: Filter = (context, saturation = '1') => {\n  let amount = normalizeNumberPercentage(saturation);\n\n  // do not manipulate without proper amount\n  if (amount === 1) {\n    return context;\n  }\n\n  // align minimum\n  if (amount < 0) {\n    amount = 0;\n  }\n\n  const { height, width } = context.canvas;\n  const imageData = context.getImageData(0, 0, width, height);\n  const { data } = imageData;\n  const lumR = (1 - amount) * 0.3086;\n  const lumG = (1 - amount) * 0.6094;\n  const lumB = (1 - amount) * 0.082;\n  // tslint:disable-next-line no-bitwise\n  const shiftW = width << 2;\n\n  for (let j = 0; j < height; j++) {\n    const offset = j * shiftW;\n    for (let i = 0; i < width; i++) {\n      // tslint:disable-next-line no-bitwise\n      const pos = offset + (i << 2);\n      const r = data[pos + 0];\n      const g = data[pos + 1];\n      const b = data[pos + 2];\n\n      data[pos + 0] = (lumR + amount) * r + lumG * g + lumB * b;\n      data[pos + 1] = lumR * r + (lumG + amount) * g + lumB * b;\n      data[pos + 2] = lumR * r + lumG * g + (lumB + amount) * b;\n    }\n  }\n\n  // set back image data to context\n  context.putImageData(imageData, 0, 0);\n\n  // return the context itself\n  return context;\n};\n", "import type { Filter } from '../types/filter.type';\nimport { normalizeNumberPercentage } from '../utils/filter.utils';\n\nexport const sepia: Filter = (context, amount = '0') => {\n  amount = normalizeNumberPercentage(amount);\n\n  // do not manipulate without proper amount\n  if (amount <= 0) {\n    return context;\n  }\n\n  // a maximum of 100%\n  if (amount > 1) {\n    amount = 1;\n  }\n\n  const { height, width } = context.canvas;\n  const imageData = context.getImageData(0, 0, width, height);\n  const { data } = imageData;\n  const { length } = data;\n\n  // in rgba world, every\n  // n * 4 + 0 is red,\n  // n * 4 + 1 green and\n  // n * 4 + 2 is blue\n  // the fourth can be skipped as it's the alpha channel\n  // https://github.com/licson0729/CanvasEffects/blob/master/CanvasEffects.js#L464-L466\n  for (let i = 0; i < length; i += 4) {\n    const r = data[i + 0];\n    const g = data[i + 1];\n    const b = data[i + 2];\n    data[i + 0] = (0.393 * r + 0.769 * g + 0.189 * b) * amount + r * (1 - amount);\n    data[i + 1] = (0.349 * r + 0.686 * g + 0.168 * b) * amount + g * (1 - amount);\n    data[i + 2] = (0.272 * r + 0.534 * g + 0.131 * b) * amount + b * (1 - amount);\n  }\n\n  // set back image data to context\n  context.putImageData(imageData, 0, 0);\n\n  // return the context itself\n  return context;\n};\n", "import { AvailableFilter } from './enums/available-filter.enum';\nimport { SUPPORTED_FILTERS } from './globals/supported-filters.global';\n\n// feature detector\nimport { supportsContextFilters } from './utils/context.utils';\n\n// the patches we'll be using\nimport { applyPropertyPatches } from './patches/property.patches';\nimport { applySetterPatches } from './patches/setter.patches';\nimport { applyMethodPatches } from './patches/method.patches';\n\n// add supported filters here by mapping the available\nimport { none } from './filters/none.filter';\nimport { blur } from './filters/blur.filter';\nimport { brightness } from './filters/brightness.filter';\nimport { contrast } from './filters/contrast.filter';\nimport { dropShadow } from './filters/drop-shadow.filter';\nimport { grayscale } from './filters/grayscale.filter';\nimport { hueRotate } from './filters/hue-rotate.filter';\nimport { invert } from './filters/invert.filter';\nimport { opacity } from './filters/opacity.filter';\nimport { saturate } from './filters/saturate.filter';\nimport { sepia } from './filters/sepia.filter';\n\n// filter to the imported, implemented function\nSUPPORTED_FILTERS.set(AvailableFilter.None, none);\nSUPPORTED_FILTERS.set(AvailableFilter.Blur, blur);\nSUPPORTED_FILTERS.set(AvailableFilter.Brightness, brightness);\nSUPPORTED_FILTERS.set(AvailableFilter.Contrast, contrast);\nSUPPORTED_FILTERS.set(AvailableFilter.DropShadow, dropShadow);\nSUPPORTED_FILTERS.set(AvailableFilter.Grayscale, grayscale);\nSUPPORTED_FILTERS.set(AvailableFilter.HueRotate, hueRotate);\nSUPPORTED_FILTERS.set(AvailableFilter.Invert, invert);\nSUPPORTED_FILTERS.set(AvailableFilter.Opacity, opacity);\nSUPPORTED_FILTERS.set(AvailableFilter.Saturate, saturate);\nSUPPORTED_FILTERS.set(AvailableFilter.Sepia, sepia);\n\n// polyfill if the feature is not implemented\nconst isBrowser =\n  typeof HTMLCanvasElement !== 'undefined' && typeof CanvasRenderingContext2D !== 'undefined';\n\nif (isBrowser && !supportsContextFilters()) {\n  // we monkey-patch all context members to\n  // apply everything to the current mirror\n  applyPropertyPatches(HTMLCanvasElement, CanvasRenderingContext2D);\n  applySetterPatches(CanvasRenderingContext2D);\n  applyMethodPatches(CanvasRenderingContext2D);\n}\n"],
  "mappings": "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",
  "names": ["SUPPORTED_FILTERS", "supportsContextFilters", "createOffscreenContext", "original", "canvas", "applyPropertyPatches", "canvas", "context", "PROTECTED_KEYS", "applySetterPatches", "context", "member", "PROTECTED_KEYS", "descriptor", "original", "value", "createOffscreenContext", "DRAWING_FUNCTIONS", "applyFilter", "context", "canvasFilters", "_a", "filter", "input", "options", "SUPPORTED_FILTERS", "normalizeNumberPercentage", "percentage", "normalized", "normalizeAngle", "angle", "normalizeLength", "length", "applyMethodPatches", "context", "member", "PROTECTED_KEYS", "descriptor", "original", "args", "createOffscreenContext", "result", "DRAWING_FUNCTIONS", "strokeStyle", "fillStyle", "applyFilter", "originalTransform", "none", "context", "blur", "context", "radius", "amount", "normalizeLength", "height", "width", "imageData", "data", "wm", "hm", "rad1", "mulSum", "shgSum", "r", "g", "b", "a", "vmin", "vmax", "iterations", "p", "p1", "p2", "pa", "yw", "yi", "y", "rsum", "gsum", "bsum", "asum", "i", "x", "yp", "brightness", "context", "amount", "normalizeNumberPercentage", "height", "width", "imageData", "data", "length", "i", "contrast", "context", "amount", "normalizeNumberPercentage", "height", "width", "imageData", "data", "length", "i", "dropShadow", "context", "offsetX", "offsetY", "blurOrColor", "color", "shadowContext", "width", "height", "normalizeLength", "grayscale", "context", "amount", "normalizeNumberPercentage", "height", "width", "imageData", "data", "length", "i", "luma", "hueRotate", "context", "rotation", "amount", "normalizeAngle", "height", "width", "imageData", "data", "th", "thr", "d", "b", "ma", "mb", "mc", "md", "me", "mf", "mg", "mh", "mi", "place", "y", "x", "ir", "ig", "ib", "invert", "context", "amount", "normalizeNumberPercentage", "height", "width", "imageData", "data", "length", "i", "opacity", "context", "amount", "normalizeNumberPercentage", "height", "width", "imageData", "data", "length", "i", "saturate", "context", "saturation", "amount", "normalizeNumberPercentage", "height", "width", "imageData", "data", "lumR", "lumG", "lumB", "shiftW", "j", "offset", "i", "pos", "r", "g", "b", "sepia", "context", "amount", "normalizeNumberPercentage", "height", "width", "imageData", "data", "length", "i", "r", "g", "b", "SUPPORTED_FILTERS", "none", "blur", "brightness", "contrast", "dropShadow", "grayscale", "hueRotate", "invert", "opacity", "saturate", "sepia", "isBrowser", "supportsContextFilters", "applyPropertyPatches", "applySetterPatches", "applyMethodPatches"]
}
